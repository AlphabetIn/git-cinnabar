#!/usr/bin/env python2.7

from __future__ import division
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), 'pythonlib'))

from cinnabar.githg import (
    UpgradeException,
    GitHgStore,
    LazyString,
)
from cinnabar.hg import Remote
import logging
from cinnabar.remote_helper import GitRemoteHelper
from cinnabar.util import (
    init_logging,
)


def main(args):
    if sys.platform == 'win32':
        # By default, sys.stdout on Windows will transform \n into \r\n, which
        # the calling git process won't recognize in our answers.
        import msvcrt
        msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
    init_logging()
    logger = logging.getLogger('-')
    logger.info(args)
    assert len(args) == 2
    remote = Remote(*args)

    try:
        store = GitHgStore()
    except UpgradeException as e:
        logging.error(e.message)
        return 1

    logger.info(LazyString(lambda: '%s' % store.heads()))

    helper = GitRemoteHelper(store, remote)
    while True:
        cmd, args = helper.read_cmd()
        if not cmd:
            break

        if cmd == 'capabilities':
            helper.capabilities(*args)
        elif cmd == 'list':
            helper.list(*args)
        elif cmd == 'option':
            helper.option(*args)
        elif cmd == 'import':
            helper.import_(*args)
        elif cmd == 'push':
            helper.push(*args)

    store.close()


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
